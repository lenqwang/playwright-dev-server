import { readFile } from "fs/promises";
import { resolve } from "path";
import type { Plugin, ScriptConfig, PluginContext } from "../types.js";
import type { Page } from "playwright";
import { logger } from '../core/Logger.js';

/**
 * ËÑöÊú¨Ê≥®ÂÖ•Êèí‰ª∂ - Ë¥üË¥£Â∞ÜËÑöÊú¨Ê≥®ÂÖ•Âà∞È°µÈù¢‰∏≠
 */
export function scriptInjectionPlugin(): Plugin {
  return {
    name: "script-injection",
    order: 10, // ËæÉÊó©ÊâßË°å

    async platformReady(platformId, page) {
      const platform = this.config.platforms[platformId];
      if (!platform?.scripts?.length) {
        return;
      }

      // Êåâ order ÊéíÂ∫èËÑöÊú¨
      const sortedScripts = [...platform.scripts].sort(
        (a, b) => (a.order || 100) - (b.order || 100)
      );

      for (const script of sortedScripts) {
        if (script.autoInject !== false) {
          if (this.injectScript) {
            await this.injectScript(platformId, page, script);
          } else {
            logger.error(
              "injectScript method not available in plugin context"
            );
          }
        }
      }
    },

    async fileChanged(filePath, event) {
      if (event === "unlink") {
        return;
      }

      // Ê£ÄÊü•ÊòØÂê¶ÊòØËÑöÊú¨Êñá‰ª∂
      for (const [platformId, platform] of Object.entries(
        this.config.platforms
      )) {
        const script = platform.scripts?.find(
          (s) =>
            resolve(this.projectRoot, s.path) ===
            resolve(this.projectRoot, filePath)
        );

        if (script) {
          const page = this.getPage(platformId);
          if (page) {
            if (script.reloadOnChange) {
              // Âà∑Êñ∞È°µÈù¢Âπ∂ÈáçÊñ∞Ê≥®ÂÖ•ÊâÄÊúâËÑöÊú¨ÂíåÊ†∑Âºè
              logger.log(
                `üîÑ Reloading page for script: ${script.path} (platform: ${platformId})`
              );
              await page.reload();

              // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàê
              await page.waitForLoadState("domcontentloaded");

              // ÈáçÊñ∞Ê≥®ÂÖ•ÊâÄÊúâËÑöÊú¨ÂíåÊ†∑Âºè
              if (this.reInjectAllAssets) {
                await this.reInjectAllAssets(platformId, page);
              } else {
                logger.error(
                  "reInjectAllAssets method not available in plugin context"
                );
              }
            } else if (this.injectScript) {
              // ÊõøÊç¢ËÑöÊú¨
              logger.log(
                `üîÑ Replacing script: ${script.path} for platform: ${platformId}`
              );
              await this.injectScript(platformId, page, script);
            }
          }
        }
      }
    },
  };
}

// Êâ©Â±ïÊèí‰ª∂‰∏ä‰∏ãÊñáÔºåÊ∑ªÂä†ËÑöÊú¨Ê≥®ÂÖ•ÊñπÊ≥ï

// Âú®Êèí‰ª∂ÁÆ°ÁêÜÂô®‰∏≠Ê≥®ÂÖ•Ëøô‰∏™ÊñπÊ≥ï
export function extendContextWithScriptInjection(context: PluginContext) {
  context.injectScript = async function (
    platformId: string,
    page: Page,
    script: ScriptConfig
  ) {
    try {
      const scriptPath = resolve(this.projectRoot, script.path);
      let content = await readFile(scriptPath, "utf-8");

      // ÊâßË°åËΩ¨Êç¢Èí©Â≠ê
      content =
        (await this.executeTransformHook?.(
          "transformScript",
          content,
          script.path,
          platformId
        )) || content;

      // ‰ΩøÁî®Êõ¥ÂÆâÂÖ®ÁöÑËÑöÊú¨Ê≥®ÂÖ•ÊñπÊ≥ï
      const scriptId = `playwright-dev-script-${script.path.replace(
        /[^a-zA-Z0-9]/g,
        "-"
      )}`;

      await page.evaluate(
        ({ scriptPath, scriptContent, scriptId }) => {
          // Remove existing script with same path
          const existingScript = document.querySelector(
            `script[data-playwright-dev-script="${scriptPath}"]`
          );
          if (existingScript) {
            existingScript.remove();
          }

          // Add new script
          const newScript = document.createElement("script");
          newScript.setAttribute("data-playwright-dev-script", scriptPath);
          newScript.id = scriptId;
          newScript.textContent = scriptContent;
          document.head.appendChild(newScript);
        },
        {
          scriptPath: script.path,
          scriptContent: content,
          scriptId: scriptId,
        }
      );

      // ÂèëÂ∞Ñ‰∫ã‰ª∂
      await this.emit("script:inject", {
        platformId,
        page,
        scriptPath: script.path,
        content,
      });

      logger.log(
        `‚úÖ Injected script: ${script.path} to platform: ${platformId}`
      );
    } catch (error) {
      logger.error(`‚ùå Failed to inject script ${script.path}:`, error);
    }
  };

  // ÈáçÊñ∞Ê≥®ÂÖ•ÊâÄÊúâËµÑÊ∫êÁöÑÊñπÊ≥ï
  context.reInjectAllAssets = async function (platformId: string, page: Page) {
    try {
      const platform = this.config.platforms[platformId];
      if (!platform) return;

      logger.log(`üîÑ Re-injecting all assets for platform: ${platformId}`);

      // ÈáçÊñ∞Ê≥®ÂÖ•ÊâÄÊúâÊ†∑ÂºèÔºàÊåâÈ°∫Â∫èÔºâ
      if (platform.styles?.length) {
        const sortedStyles = [...platform.styles].sort(
          (a, b) => (a.order || 100) - (b.order || 100)
        );

        for (const style of sortedStyles) {
          if (style.autoInject !== false && this.injectStyle) {
            await this.injectStyle(platformId, page, style);
          }
        }
      }

      // ÈáçÊñ∞Ê≥®ÂÖ•ÊâÄÊúâËÑöÊú¨ÔºàÊåâÈ°∫Â∫èÔºâ
      if (platform.scripts?.length) {
        const sortedScripts = [...platform.scripts].sort(
          (a, b) => (a.order || 100) - (b.order || 100)
        );

        for (const script of sortedScripts) {
          if (script.autoInject !== false && this.injectScript) {
            await this.injectScript(platformId, page, script);
          }
        }
      }

      logger.log(`‚úÖ All assets re-injected for platform: ${platformId}`);
    } catch (error) {
      logger.error(
        `‚ùå Failed to re-inject assets for platform ${platformId}:`,
        error
      );
    }
  };
}
